### 需要gcc gcc-c++  配置文件 启动脚本查看最下面###

cd /usr/local/src/
wget http://download.redis.io/releases/redis-3.2.6.tar.gz
tar zxvf redis-3.2.6.tar.gz

cd redis-3.2.6
make
make install
mkdir /etc/redis
mkdir /var/log/redis -p
mkdir /opt/redis -p     

## 拷贝默认配置文件，并根据指定端口进行修改
## 以端口6389举例
#注意端口号（这里不使用默认端口）
cp redis.conf /etc/redis/6389.conf
#修改为守护进程
sed -i 's/daemonize no/daemonize yes/g' /etc/redis/6389.conf
#修改默认端口
sed -i 's/port 6379/port 6389/g' /etc/redis/6389.conf
#指定log路径
sed -i 's#logfile ""#logfile "/var/log/redis/redis_6389.log"#g' /etc/redis/6389.conf
#修改本地数据库名称，可能要开多个redis
sed -i 's/dbfilename dump.rdb/dbfilename dump_6389.rdb/g' /etc/redis/6389.conf
#修改本地数据库存放路径
sed -i 's#dir ./#dir /opt/redis#g' /etc/redis/6389.conf
#添加redis密码
sed -i 's/# requirepass foobared/requirepass gsmcredis/g' /etc/redis/6389.conf
#开启持久化
sed -i 's/appendonly no/appendonly yes/g' /etc/redis/6389.conf
#修改日志名称
sed -i 's/appendfilename "appendonly.aof"/appendfilename "appendonly_6389.aof"/g' /etc/redis/6389.conf
#修改pid文件名称
sed -i 's#pidfile /var/run/redis_6379.pid#pidfile /var/run/redis_6389.pid#g' /etc/redis/6389.conf

## 拷贝守护脚本，命名规则为"redis端口号"，例如"redis6389"
#启动脚本需要添加密码，chkconfig，可以参考最下方
cp utils/redis_init_script /etc/init.d/redis6389
/etc/init.d/redis6389 start


################### 示例配置文件 ###################
#在原先基础上添加密码，修改端口号等

bind 127.0.0.1
protected-mode yes
port 6389
tcp-backlog 511
timeout 0
tcp-keepalive 300
daemonize yes
supervised no
pidfile /var/run/redis_6389.pid
loglevel notice
logfile "/var/log/redis/redis_6389.log"
databases 16
save 900 1
save 300 10
save 60 10000
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump_6389.rdb
dir /opt/redis
slave-serve-stale-data yes
slave-read-only yes
repl-diskless-sync no
repl-diskless-sync-delay 5
repl-disable-tcp-nodelay no
slave-priority 100
requirepass gsmcredis
appendonly yes
appendfilename "appendonly_6389.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb
aof-load-truncated yes
lua-time-limit 5000
slowlog-log-slower-than 10000
slowlog-max-len 128
latency-monitor-threshold 0
notify-keyspace-events ""
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
hll-sparse-max-bytes 3000
activerehashing yes
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
hz 10
aof-rewrite-incremental-fsync yes


##################### 示例启动脚本 #####################
#在原先的基础上添加password，修改端口，添加开机启动

#!/bin/sh
#chkconfig: 2345 58 68
#
# Simple Redis init.d script conceived to work on Linux systems
# as it does use of the /proc filesystem.

REDISPORT=6389
EXEC=/usr/local/bin/redis-server
CLIEXEC=/usr/local/bin/redis-cli

PIDFILE=/var/run/redis_${REDISPORT}.pid
CONF="/etc/redis/${REDISPORT}.conf"
AUTH_PASSWORD="gsmcredis"

case "$1" in
    start)
        if [ -f $PIDFILE ]
        then
                echo "$PIDFILE exists, process is already running or crashed"
        else
                echo "Starting Redis server..."
                $EXEC $CONF
        fi
        ;;
    stop)
        if [ ! -f $PIDFILE ]
        then
                echo "$PIDFILE does not exist, process is not running"
        else
                PID=$(cat $PIDFILE)
                echo "Stopping ..."
                $CLIEXEC -p $REDISPORT -a $AUTH_PASSWORD shutdown
                while [ -x /proc/${PID} ]
                do
                    echo "Waiting for Redis to shutdown ..."
                    sleep 1
                done
                echo "Redis stopped"
        fi
        ;;
    *)
        echo "Please use start or stop as first argument"
        ;;
esac


##################### sentinel #####################
vim /etc/redis/sentinel.conf
# 注意密码 和IP 
------------------------
bind 0.0.0.0
protected-mode no
daemonize yes
port 26379
loglevel notice
logfile "/var/log/redis/sentinel.log"
sentinel monitor mymaster 192.168.33.51 6379 3
sentinel auth-pass mymaster 123456
sentinel down-after-milliseconds mymaster 5000
sentinel failover-timeout mymaster 8000
sentinel parallel-syncs mymaster 1
------------------------

vim /etc/init.d/sentinel
------------------------
#!/bin/sh
#chkconfig: 35 80 90
#
# Simple Redis init.d script conceived to work on Linux systems
# as it does use of the /proc filesystem.

REDISPORT=26379
EXEC=/usr/local/bin/redis-sentinel
CLIEXEC=/usr/local/bin/redis-cli

PIDFILE=/var/run/sentinel.pid
CONF="/etc/redis/sentinel.conf"

case "$1" in
    start)
        if [ -f $PIDFILE ]
        then
                echo "$PIDFILE exists, process is already running or crashed"
        else
                echo "Starting Redis server..."
                $EXEC $CONF &
                sleep 1
                echo `ps aux |grep redis-sentinel|grep -v grep|grep ${REDISPORT}|awk '{print $2}'` > $PIDFILE
        fi
        ;;
    stop)
        if [ ! -f $PIDFILE ]
        then
                echo "$PIDFILE does not exist, process is not running"
        else
                PID=$(cat $PIDFILE)
                echo "Stopping ..."
                $CLIEXEC -p $REDISPORT -a $AUTH_PASSWORD shutdown
                while [ -x /proc/${PID} ]
                do
                    echo "Waiting for Redis to shutdown ..."
                    sleep 1
                done
                echo "Redis stopped"
                rm -rf $PIDFILE
        fi
        ;;
    *)
        echo "Please use start or stop as first argument"
        ;;
esac
------------------------
chmod +x /etc/init.d/sentinel

#默认log 在/var/log/redis/sentinel.log